'*********************************************************************************************
'Copyright(C) 2020 Xarial Pty Limited
'Reference: https://www.codestack.net/solidworks-api/import-export/export-sheets-pdf/
'License: https://www.codestack.net/license/
'*********************************************************************************************
' Изменения и дополнения: Дербуш Олег aka Snake-60 (snake-60@bk.ru)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Последние изменения :: (11.12.2021) ::
''' в версии 1.0.5 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' - Добавил возможность сохранять по абсолютному пути
''' в версии 1.0.4 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' - Убрал косяк при сохранении чертежей в папку
''' в версии 1.0.3 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' - Убрал дублирование открытых папок при каждом сохранении
''' в версии 1.0.2 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' - Если в чертеже 2 или более страниц, то создаются файлы в формате ИмяФайла - ИмяЛиста.pdf
' - Если в чертеже 1 страница, то создается файл в формате ИмяФайла.pdf
''' в версии 1.0.1 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' - макрос сохраняет чертеж в формате PDF, создает папку PDF и открывает ее после сохранения
'*********************************************************************************************

Const INCLUDE_DRAWING_NAME As Boolean = True
'Const FOLDER_FOR_SAVING As String = "" 'сохраняем в папку с чертежем
'Const FOLDER_FOR_SAVING As String = "PDF" 'сохраняем в указанную папку, папка создается автоматически
Const FOLDER_FOR_SAVING As String = "D:\SW\Работа в SOLIDWORKS\Кучинский\ШС\ШС\1.CAD\PDF"

Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2

Dim outFile As String
Dim outFolder As String
Dim outFolderStrip As String

Sub main()

    Set swApp = Application.SldWorks
    
try_:
    
    On Error GoTo catch_
    
    Dim swDraw As SldWorks.DrawingDoc
    
    Set swDraw = swApp.ActiveDoc
    
    Set swModel = swDraw
        
    If swModel.GetPathName() = "" Then
        Err.Raise vbError, "", "Пожалуйста, сохраните чертеж!"
    End If
        
    Dim vSheetNames As Variant
    
    Dim i As Integer

    Dim swSelMgr As SldWorks.SelectionMgr
    
    Set swSelMgr = swModel.SelectionManager
    
    Dim selSheetNames() As String
    
    For i = 1 To swSelMgr.GetSelectedObjectCount2(-1)
        
        If swSelMgr.GetSelectedObjectType3(i, -1) = swSelectType_e.swSelSHEETS Then
            
            If (Not selSheetNames) = -1 Then
                ReDim selSheetNames(0)
            Else
                ReDim Preserve selSheetNames(UBound(selSheetNames) + 1)
            End If
            Dim swSheet As SldWorks.Sheet
            Set swSheet = swSelMgr.GetSelectedObject6(i, -1)
            
            selSheetNames(UBound(selSheetNames)) = swSheet.GetName()
            
        End If
    Next
    
    If (Not selSheetNames) = -1 Then
        vSheetNames = swDraw.GetSheetNames
    Else
        vSheetNames = selSheetNames
    End If
    
    'запускаем цикл обработки по кол-ву листов чертежа
    For i = 0 To UBound(vSheetNames)
        
        Dim sheetName As String
        sheetName = vSheetNames(i)
        
        Dim swExpPdfData As SldWorks.ExportPdfData
        Set swExpPdfData = swApp.GetExportFileData(swExportDataFileType_e.swExportPdfData)
        
        Dim errs As Long
        Dim warns As Long
        
        Dim expSheets(0) As String
        expSheets(0) = sheetName
        
        swExpPdfData.ExportAs3D = False
        swExpPdfData.ViewPdfAfterSaving = False
        swExpPdfData.SetSheets swExportDataSheetsToExport_e.swExportData_ExportSpecifiedSheets, expSheets
        
        Dim drawName As String
        drawName = swModel.GetPathName()
        drawName = Mid(drawName, InStrRev(drawName, "\") + 1, Len(drawName) - InStrRev(drawName, "\") - Len(".slddrw"))
        
        outFile = swModel.GetPathName()
        outFile = Left(outFile, InStrRev(outFile, "\"))
        
        'если сохраняем в папку с чертежем
        If FOLDER_FOR_SAVING = "" Then
            outFolder = outFile & FOLDER_FOR_SAVING
            outFolderStrip = outFolder
        'если сохраняем по абсолютному пути, то есть в пути есть символ ":"
        ElseIf InStr(1, FOLDER_FOR_SAVING, ":", vbBinaryCompare) <> 0 Then
            outFolder = FOLDER_FOR_SAVING & "\"
            outFolderStrip = FOLDER_FOR_SAVING
        'если сохраняем в указанную папку
        Else
            outFolder = outFile & FOLDER_FOR_SAVING & "\"
            outFolderStrip = outFile & FOLDER_FOR_SAVING
        End If

        'если папка не существует, то
        If Not DirExists(outFolder) Then
            'создаем ее
            MkDir (outFolder)
        End If
        
        'если листов в чертеже 1, то
        If UBound(vSheetNames) = 0 Then
            'сохраняем PDF-файл в формате ИмяФайла.pdf
            outFile = outFolder & IIf(INCLUDE_DRAWING_NAME, drawName, "") & ".pdf"
        'иначе
        Else
            'сохраняем PDF-файл в формате ИмяФайла - ИмяЛиста.pdf
            outFile = outFolder & IIf(INCLUDE_DRAWING_NAME, drawName & "-", "") & sheetName & ".pdf"
        End If
        
        'если ошибка не произошла, то выполняем сохранение
        If False = swModel.Extension.SaveAs(outFile, swSaveAsVersion_e.swSaveAsCurrentVersion, swSaveAsOptions_e.swSaveAsOptions_Silent, swExpPdfData, errs, warns) Then
            'иначе выводим сообщение об ошибке
            Err.Raise vbError, "", "Не удалось сохранить PDF в " & outFile
        End If
        
    'переходим к следующему листу чертежа
    Next
    
    If False <> swDraw.GetSaveFlag() Then
        If False = swDraw.Save3(swSaveAsOptions_e.swSaveAsOptions_Silent, errs, warns) Then
            Err.Raise vbError, "", "Не удалось сохранить чертеж"
        End If
    End If
    
    OpenFolder
    
    GoTo finally_
    
catch_:
    
    swApp.SendMsgToUser2 Err.Description, swMessageBoxIcon_e.swMbStop, swMessageBoxBtn_e.swMbOk
    
finally_:

swApp.CloseDoc swDraw.GetTitle
    
End Sub

Function OpenFolder()

    Set swApp = Application.SldWorks
    Set swModel = swApp.ActiveDoc
    
    IsFolderOpen (outFolder)

End Function

Function IsFolderOpen(folderpath$)

    With CreateObject("Shell.Application")
        Dim iWin As Object
        Dim PathCompare As String
        For Each iWin In .Windows
            PathCompare = Replace(iWin.LocationURL, "file:///", "")
            PathCompare = Replace(PathCompare, "%20", " ")
            PathCompare = Replace(PathCompare, "/", "\")
             If iWin.LocationName = FOLDER_FOR_SAVING And PathCompare = outFolderStrip Then
                .Open iWin.LocationURL
                GoTo step1_
             End If
         Next
    End With
    OpenExplorerWithFileSelected (outFile)
step1_:
End Function

Function OpenExplorerWithFileSelected(filepath$)
'Test for file exists
retval = Dir(filepath$)
    If retval <> "" Then
            Shell "explorer.exe /select, " & """" & filepath$ & """", vbNormalFocus
    End If
End Function

'Функция проверки существования дирректории
Function DirExists(outFolder As String) As Boolean
    On Error GoTo ErrorHandler
    DirExists = GetAttr(outFolder) And vbDirectory
ErrorHandler:
'Завершение функции
End Function
